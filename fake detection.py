# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import joblib

# Sample dataset
data = {
    "text": [
        "The president signed a new bill into law today.",
        "NASA confirms water on the moon in a press release.",
        "Aliens have taken over the White House!",
        "Vaccines contain mind control nanochips, experts say.",
        "Local man wins lottery twice in one week.",
        "Flat Earth society claims new proof."
    ],
    "label": [1, 1, 0, 0, 1, 0]  # 1 = Real, 0 = Fake
}
df = pd.DataFrame(data)

# Vectorization
vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X = vectorizer.fit_transform(df['text'])
y = df['label']

# Model training
model = LogisticRegression()
model.fit(X, y)

# Save model and vectorizer
joblib.dump(model, "fake_news_model.pkl")
joblib.dump(vectorizer, "tfidf_vectorizer.pkl")

from flask import Flask, render_template, request
import joblib
import re

model = joblib.load("fake_news_model.pkl")
vectorizer = joblib.load("tfidf_vectorizer.pkl")

app = Flask(__name__)

def clean_text(text):
    text = re.sub(r'\W', ' ', text)
    text = re.sub(r'\s+', ' ', text)
    return text.lower()

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    news = request.form['news']
    cleaned_news = clean_text(news)
    vect_news = vectorizer.transform([cleaned_news])
    prediction = model.predict(vect_news)
    result = "Real News ✅" if prediction[0] == 1 else "Fake News ❌"
    return render_template('index.html', prediction=result, input_text=news)

if __name__ == '__main__':
    app.run(debug=True)

import pandas as pd
import numpy as np
import re
import string
import joblib

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, classification_report
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import nltk

nltk.download('stopwords')
nltk.download('wordnet')


# Text preprocessing
def clean_text(text):
    text = text.lower()
    text = re.sub(r'\[.*?\]', '', text)
    text = re.sub(r'http\S+', '', text)
    text = re.sub(r'<.*?>+', '', text)
    text = re.sub(r'[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub(r'\n', '', text)
    text = re.sub(r'\w*\d\w*', '', text)

    lemmatizer = WordNetLemmatizer()
    words = text.split()
    words = [lemmatizer.lemmatize(word) for word in words if word not in stopwords.words('english')]
    return " ".join(words)

df['clean_text'] = df['text'].apply(clean_text)

# Feature extraction
tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
X = tfidf.fit_transform(df['clean_text'])
y = df['label']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
model = PassiveAggressiveClassifier(max_iter=50)
model.fit(X_train, y_train)

# Save model
joblib.dump((model, tfidf), 'model.pkl')

# Evaluation
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

"""<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
<title>Advanced Fake News Detector</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');

  /* Reset */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body, html {
    height: 100%;
    font-family: 'Montserrat', sans-serif;
    background: linear-gradient (135deg), #1e3c72, #2a5298);
    color: #f0f0f0;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
  }

  .container {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    max-width: 350px;
    width: 100%;
    max-height: 600px;
    padding: 20px 30px 30px 30px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.3);
    display: flex;
    flex-direction: column;
  }

  h1 {
    font-weight: 700;
    font-size: 1.8rem;
    margin-bottom: 15px;
    text-align: center;
    color: #00e0ff;
    text-shadow: 0 0 6px #00e0ff;
  }

  h2 {
    font-weight: 600;
    font-size: 1.2rem;
    margin-bottom: 15px;
    text-align: center;
    color: #ffffffcc;
  }

  textarea {
    flex-grow: 1;
    resize: none;
    border-radius: 15px;
    border: none;
    padding: 15px;
    font-size: 1rem;
    font-family: inherit;
    background-color: rgba(255,255,255,0.15);
    color: #fff;
    box-shadow: inset 0 0 10px rgba(0,0,0,0.3);
    transition: background-color 0.3s ease;
    min-height: 180px;
    outline: none;
  }
  textarea::placeholder {
    color: #ddddddbb;
  }
  textarea:focus {
    background-color: rgba(255,255,255,0.3);
  }

  button {
    margin-top: 20px;
    background: #00e0ff;
    border: none;
    border-radius: 15px;
    color: #003344;
    font-weight: 700;
    font-size: 1.1rem;
    padding: 15px 0;
    cursor: pointer;
    box-shadow: 0 0 15px #00e0ffcc;
    transition: background 0.3s ease, color 0.3s ease;
  }
  button:hover {
    background: #00c2d9;
    color: #001f26;
  }
  button:disabled {
    background: #00555f;
    color: #cccccc;
    cursor: not-allowed;
    box-shadow: none;
  }

  .result-box {
    margin-top: 25px;
    padding: 15px;
    border-radius: 15px;
    text-align: center;
    font-weight: 700;
    font-size: 1.2rem;
    user-select: none;
    box-shadow: 0 0 20px rgba(0,0,0,0.5);
    min-height: 60px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .result-fake {
    background: #ff4d4d;
    color: #440000;
    text-shadow: 1px 1px 4px #7a1111;
  }
  .result-real {
    background: #4dff88;
    color: #003300;
    text-shadow: 1px 1px 4px #117711;
  }
  .result-unknown {
    background: #ffd966;
    color: #664400;
    text-shadow: 1px 1px 3px #a6761e;
  }

  footer {
    margin-top: 15px;
    font-size: 0.8rem;
    color: #ccccccaa;
    text-align: center;
  }

  /* Scrollbar styling for textarea */
  textarea::-webkit-scrollbar {
    width: 8px;
  }
  textarea::-webkit-scrollbar-track {
    background: rgba(255,255,255,0.1);
    border-radius: 10px;
  }
  textarea::-webkit-scrollbar-thumb {
    background: #00e0ff66;
    border-radius: 10px;
  }

  @media (max-width: 400px) {
    .container {
      max-width: 100%;
      max-height: 600px;
      padding: 15px 20px 20px 20px;
    }
    h1 {
      font-size: 1.6rem;
    }
    button {
      font-size: 1rem;
      padding: 12px 0;
    }
  }
</style>
</head>
<body>
  <div class="container" role="main" aria-label="Fake news detection application">
    <h1>Expose the Truth</h1>
    <h2>Advanced Fake News Detector</h2>
    <textarea id="newsInput" placeholder="Paste or write news content here..." aria-label="News article input"></textarea>
    <button id="detectBtn" aria-live="polite" aria-label="Detect fake news">Detect Fake News</button>
    <div id="result" class="result-box result-unknown" aria-live="assertive" role="alert" aria-atomic="true">
      Enter news content to analyze.
    </div>
    <footer>Powered by Natural Language Processing &amp; Heuristics</footer>
  </div>

<script>
  // Frontend fake news detector heuristic
  // Keywords and phrases common in fake news and misinformation
  const fakeIndicators = [
    "shocking", "unbelievable", "controversial", "exclusive", "secret",
    "click here", "you won't believe", "miracle", "conspiracy", "fake",
    "hoax", "debunked", "sensational", "allegedly", "rumor", "viral",
    "must see", "exposed", "breaking", "scandal", "propaganda", "false",
    "anti-vax", "vaccines cause", "5G causes", "plandemic", "deep state",
    "Covid hoax", "Bill Gates", "plandemic", "fake news", "discredited",
    "never happened", "didn't happen", "cure for cancer", "illuminati"
  ];

  // Positive keywords (rare in fake news) to lean toward real
  const realIndicators = [
    "according to", "sources say", "research", "study", "data", "official",
    "confirmed", "statistics", "survey", "government", "reported", "evidence",
    "peer-reviewed", "analysis", "scientists", "experts", "investigation"
  ];

  function analyzeText(text) {
    if (!text || text.trim().length < 30) {
      return { label: "unknown", message: "Please enter more detailed news content for analysis." };
    }

    const lowerText = text.toLowerCase();
    let fakeCount = 0;
    let realCount = 0;

    // Count fake indicators
    fakeIndicators.forEach(keyword => {
      if(lowerText.includes(keyword)) fakeCount++;
    });

    // Count real indicators
    realIndicators.forEach(keyword => {
      if(lowerText.includes(keyword)) realCount++;
    });

    // Basic scoring strategy
    if(fakeCount === 0 && realCount === 0) {
      return { label: "unknown", message: "Could not detect clear indicators. News might be neutral or unclear." };
    }

    // Heuristic decision
    if(fakeCount > realCount) {
      const confidence = Math.min(100, (fakeCount - realCount) * 20);
      return { label: "fake", message: `Likely Fake News (Confidence: ${confidence}%)` };
    } else if(realCount > fakeCount) {
      const confidence = Math.min(100, (realCount - fakeCount) * 15);
      return { label: "real", message: `Likely Real News (Confidence: ${confidence}%)` };
    } else {
      return { label: "unknown", message: "News seems mixed or inconclusive." };
    }
  }

  const newsInput = document.getElementById('newsInput');
  const detectBtn = document.getElementById('detectBtn');
  const resultBox = document.getElementById('result');

  detectBtn.addEventListener('click', () => {
    const text = newsInput.value.trim();

    detectBtn.disabled = true;
    resultBox.textContent = "Analyzing...";
    resultBox.className = "result-box result-unknown";

    // Simulate some delay for analysis
    setTimeout(() => {
      const analysis = analyzeText(text);
      resultBox.textContent = analysis.message;
      if(analysis.label === "fake") {
        resultBox.className = "result-box result-fake";
      } else if(analysis.label === "real") {
        resultBox.className = "result-box result-real";
      } else {
        resultBox.className = "result-box result-unknown";
      }
      detectBtn.disabled = false;
    }, 700);
  });

  // Allow pressing Enter + Ctrl/Cmd to trigger detection
  newsInput.addEventListener('keydown', (e) => {
    if ((e.key === 'Enter' || e.key === 'NumpadEnter') && (e.ctrlKey || e.metaKey)) {
      detectBtn.click();
    }
  });
</script>
</body>
</html>
"""

